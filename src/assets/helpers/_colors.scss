@use "../settings";

@use "sass:map";
@use "sass:meta";
@use "sass:string";

// Get semantic color from palette
@function kim-color($name, $mode: "light") {
  $map: settings.$kim-color-palette-semantic;
  @if not map.has-key($map, $name) {
    @error "Map does not have key named `#{$name}`.";
  }
  $color: map.get($map, $name);
  @if not map.has-key($color, $mode) {
    @error "Colour does not have a value for `#{$mode}` mode.";
  }
  @return map.get($color, $mode);
}

@function kim-color-css($name) {
  @return string.unquote("var(--color-#{$name})");
}

@mixin kim-output-all-color-properties($mode) {
  @each $name, $values in settings.$kim-color-palette-semantic {
    $color: map.get($values, $mode);
    @if meta.type-of($color) == "color" {
      --color-#{$name}: #{$color};
    } @else if meta.type-of($color) == "map" and map.has-key($color, "fallback")
    {
      --color-#{$name}: #{map.get($color, "fallback")};
      --color-#{$name}: #{map.get($color, "color")};
    }
  }
}
